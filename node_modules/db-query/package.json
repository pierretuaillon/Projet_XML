{
  "name": "db-query",
  "description": "Create SQL queries programatically in Node.js. Loosely based on Rails' ActiveRelation.",
  "version": "0.1.4",
  "homepage": "https://github.com/markselby/node-db-query",
  "author": {
    "name": "Mark Selby",
    "email": "mark@writebox.co.uk",
    "url": "www.writebox.co.uk"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/markselby/node-db-query.git"
  },
  "bugs": {
    "url": "https://github.com/markselby/node-db-query/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/markselby/node-db-query/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/pool",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt nodeunit"
  },
  "dependencies": {
    "grunt": "~0.4.1"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt-contrib-watch": "~0.2.0"
  },
  "keywords": [],
  "readme": "# node-db-query\n\nCreate SQL queries programatically in Node.js. Loosely based on Rails' ActiveRelation.\nWorks with node postgres.\n\n## Getting Started\nInstall the module with: `npm install db-query`\n\nYou'll also need to `npm install pg`.\n\n## Configuration\n\nYou'll need a config/database.yml that looks something like :\n```yml\ndefaults: &defaults\n  host: localhost\n\ndevelopment:\n  <<: *defaults\n  database: writebox_development\n  username: cheese\n  password: edam\n\nproduction:\n  <<: *defaults\n  database: writebox_production\n  username: cheese\n  password: camembert\n```\n\nAnd optionally a config/queries.yml that looks something like :  \n(Note the optional use of parameters - $1, $2 etc)\n```yml\nnews-search:\n  SELECT ts_headline(title, q, 'HighlightAll=TRUE') AS title, link, image, ts_headline(intro, q, 'HighlightAll=TRUE') AS intro\n  FROM (SELECT title, link, image, intro, ts_rank_cd(tsv, q) AS rank, q FROM news, to_tsquery($1) as q\n  WHERE tsv @@ q ORDER BY rank DESC OFFSET $2 LIMIT 20) AS results\n\nnews-search-count:\n  SELECT count(*) FROM news WHERE tsv @@ to_tsquery($1)\n\nnews-latest:\n  SELECT * FROM news LIMIT 10\n```\n\nAnd then use it like this :\n\n```javascript\n// Typical connection pool\nvar db = require('db-query')(process.env.NODE_ENV);\n\n// Optional separate connection pool\nvar dbProd = require('db-query')('production');\n\n// Example callback\nfunction someCallback(rows) {\n  console.log('Rows : ' + rows.length);\n}\n\n// You can use callbacks and/or events\n\n// Programmatic query - so call .execute() as the last step\ndb.query('news', someCallback)\n  .select('*')\n  .on('error', function(err) { console.log(err); })\n  .on('end', function(result) { console.log(result[0]); })\n  .execute();\n\n// Named query (from your config/queries.yml file) - no need to call .execute()\n// name, query parameters, optional callback\ndb.named('news-search', ['syria', 20], someCallback)\n  .on('error', function(err) { console.log(err); })\n  .on('end', function(result) { console.log(result[0]); });\n\n// Other example stuff\nvar options = { id: [1,2,3,4] };\n// or options = { id: '1,2,3,4' };\n\ndb2.query()\n  .select('*')\n  .from('users')\n  .join('JOIN posts ON posts.user_id = users.id')\n  .order('posts.updated_at DESC')\n  .limit(10);\n\n// Add some sample optional processing to the query\nvar food = 'cheese';\n\nif (food) {\n  // Get people by food\n  q.join('JOIN foods ON foods.id = users.food_id')\n  q.param(food);\n  q.where('foods.name = ' + q.paramNo()); // This becomes : foods.name = $1\n} else {\n  // Get people by id(s)\n  // q.ids is another form of q.param, but will join arrays and wraps the result in '{ }' braces.\n  q.ids([1,2,3,4]); // q.ids('1,2,3,4'); as an alternative\n  // This is using Postgres' ANY format rather than id IN blah because it's much more efficient\n  q.where('id = ANY(' + q.paramNo() + '::int[])');\n  // This becomes : id = ANY($1::int[]) \n}\n\n// Prepare some event handlers and execute the query\nq.on('row', function(row) { console.log(row); })\n  .on('error', function(err) { console.log(err); })\n  .on('end', function(data) { console.log(data); })\n  .execute();\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n_v0.1.0_\n\n## License\nCopyright (c) 2013 Mark Selby  \nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "db-query@0.1.4",
  "dist": {
    "shasum": "bb601793a8550af0625b0fadee3528dfca521d8f",
    "tarball": "https://registry.npmjs.org/db-query/-/db-query-0.1.4.tgz"
  },
  "_from": "db-query@latest",
  "_npmVersion": "1.2.21",
  "_npmUser": {
    "name": "mark_selby",
    "email": "mark@writebox.co.uk"
  },
  "maintainers": [
    {
      "name": "mark_selby",
      "email": "mark@writebox.co.uk"
    }
  ],
  "directories": {},
  "_shasum": "bb601793a8550af0625b0fadee3528dfca521d8f",
  "_resolved": "https://registry.npmjs.org/db-query/-/db-query-0.1.4.tgz"
}
